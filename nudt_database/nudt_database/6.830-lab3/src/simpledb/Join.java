package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator
{
	
	/**
	 * Constructor. Accepts to children to join and the predicate to join them
	 * on
	 *
	 * @param p
	 *            The predicate to use to join the children
	 * @param child1
	 *            Iterator for the left(outer) relation to join
	 * @param child2
	 *            Iterator for the right(inner) relation to join
	 * @throws TransactionAbortedException
	 * @throws DbException
	 */
	private JoinPredicate	p;
	private DbIterator		child1;
	private DbIterator		child2;
	private Tuple			tp1;
	private Tuple			tp2;
	
	public Join(JoinPredicate p, DbIterator child1, DbIterator child2)
			throws DbException, TransactionAbortedException
	{
		// some code goes here
		this.p = p;
		this.child1 = child1;
		this.child2 = child2;
		
	}
	
	/**
	 * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible
	 *      implementation logic.
	 */
	public TupleDesc getTupleDesc()
	{
		// some code goes here
		return TupleDesc.combine(child1.getTupleDesc(), child2.getTupleDesc());
		// return null;
	}
	
	public void open() throws DbException, NoSuchElementException,
			TransactionAbortedException
	{
		// some code goes here
		child1.open();
		child2.open();
		if (child1.hasNext())
			tp1 = child1.next();
	}
	
	public void close()
	{
		// some code goes here
		child1.close();
		child2.close();
	}
	
	public void rewind() throws DbException, TransactionAbortedException
	{
		// some code goes here
		child1.rewind();
		child2.rewind();
	}
	
	/**
	 * Returns the next tuple generated by the join, or null if there are no
	 * more tuples. Logically, this is the next tuple in r1 cross r2 that
	 * satisfies the join predicate. There are many possible implementations;
	 * the simplest is a nested loops join.
	 * <p>
	 * Note that the tuples returned from this particular implementation of Join
	 * are simply the concatenation of joining tuples from the left and right
	 * relation. Therefore, if an equality predicate is used there will be two
	 * copies of the join attribute in the results. (Removing such duplicate
	 * columns can be done with an additional projection operator if needed.)
	 * <p>
	 * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
	 * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
	 *
	 * @return The next matching tuple.
	 * @see JoinPredicate#filter
	 */
	public Tuple JoinTuple(Tuple t1, Tuple t2)
	{
		TupleDesc td = getTupleDesc();
		Tuple resultTuple = new Tuple(td);
		int numFiled1 = t1.getTupleDesc().numFields;
		int numFiled2 = t2.getTupleDesc().numFields;
		for (int i = 0; i < numFiled1; i++)
			resultTuple.setField(i, t1.getField(i));
		for (int i = 0; i < numFiled2; i++)
			resultTuple.setField(i + numFiled1, t2.getField(i));
		return resultTuple;
	}
	
	public boolean Ok()
	{
		return p.filter(tp1, tp2);
	}
	
	public boolean setTuple() throws DbException, TransactionAbortedException
	{
		if(child2.hasNext())
		{
			tp2= child2.next();
			return true;
		}
		else 
		{
			if(child1.hasNext())
			{
				tp1= child1.next();
				child2.rewind();
				tp2 = child2.next();
				return true;
			}
			return false;
		}
	}
	
	protected Tuple readNext() throws TransactionAbortedException, DbException
	{
		// some code goes here
		while(true)
		{
			if(setTuple() == false)
				return null;
			if(Ok())
				return JoinTuple(tp1,tp2);
		}
		// return null;
	}
}
